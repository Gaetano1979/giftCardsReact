{"version":3,"sources":["Components/SearchInputApp.tsx","hooks/useFetchGifs.tsx","helper/functions.tsx","Components/CardApp.tsx","Components/RowApp.tsx","Components/GitExpertApp.tsx","index.tsx"],"names":["SearchInputApp","props","setLista","useState","value","setValue","onSubmit","e","preventDefault","lista","console","log","type","onChange","evento","target","prototype","PropTypes","func","isRequired","useFetchGifts","category","data","loading","state","setState","useEffect","categoria","fromFetch","encodeURI","selector","response","json","pipe","pluck","map","id","title","images","url","downsized_medium","subscribe","CardApp","className","style","width","maxHeight","src","alt","text","margin","height","RowApp","key","img","GitExpertApp","onClick","item","concat","length","toString","nome","ReactDOM","render","document","getElementById"],"mappings":"yPAOMA,EAAiB,SAACC,GAA0C,IACvDC,EAAUD,EAAVC,SADsD,EAEpCC,mBAAiB,IAFmB,mBAEtDC,EAFsD,KAEhDC,EAFgD,KAe7D,OACI,0BAAMC,SAPW,SAACC,GAClBA,EAAEC,iBACFN,GAAU,SAACO,GAAD,4BAAyBA,GAAzB,CAA+BL,OACzCC,EAAS,IACTK,QAAQC,IAAIJ,KAIR,2BACIK,KAAK,OACLR,MAAOA,EACPS,SAjBQ,SAAEC,GAElBJ,QAAQC,IAAIG,EAAOC,OAAOX,OAC1BC,EAASS,EAAOC,OAAOX,YAoB/BJ,EAAegB,UAAY,CACvBd,S,OAASe,EAAUC,KAAKC,YAKbnB,Q,wBC7BFoB,EAAgB,SAACC,GAAsB,IAAD,EAErBlB,mBAAyB,CAC/CmB,KAAM,GACNC,SAAS,IAJkC,mBAExCC,EAFwC,KAEjCC,EAFiC,KAa/C,OANAC,qBAAU,WCVS,IAACC,KDWRN,ECVLO,YAAU,wDAAD,OAJJ,mCAII,cAAsEC,UAAUF,IAC5F,CAACG,SAAU,SAAAC,GAAQ,OAAIA,EAASC,UAC/BC,KACGC,YAAM,QACNC,aAAI,SAACb,GAAD,OAAiBA,EAAKa,KAAI,gBAAEC,EAAF,EAAEA,GAAIC,EAAN,EAAMA,MAAOC,EAAb,EAAaA,OAAb,MAA0B,CACpDF,KACAC,QACAE,IAAG,OAAED,QAAF,IAAEA,OAAF,EAAEA,EAAQE,iBAAiBD,aDGpBE,WAAU,SAAAnB,GACxBG,EAAS,CAACH,OAAMC,SAAS,SAE9B,CAACF,IAEGG,GEEIkB,EAhBC,SAAC,GAA4B,EAA3BN,GAA4B,IAAxBC,EAAuB,EAAvBA,MAAOE,EAAgB,EAAhBA,IAGzB,OACI,yBAAKI,UAAU,OACX,yBAAKA,UAAU,YAAYC,MAJrB,CAACC,MAAO,QAASC,UAAW,oBAK9B,yBAAKH,UAAU,eAAeI,IAAKR,EAAKS,IAAI,GAAGJ,MAJ1C,CAACC,MAAO,MAAOI,KAAM,SAAUC,OAAQ,OAAQC,OAAQ,WAK5D,yBAAKR,UAAU,aACX,yBAAKA,UAAU,cAAcN,OCIlCe,EAhBA,SAAC,GAAoB,IAAnB3C,EAAkB,EAAlBA,MAAkB,EAGRW,EAAcX,GAA9Ba,EAHwB,EAGxBA,KAAKC,EAHmB,EAGnBA,QAEZ,OAEI,yBAAK8B,IAAK5C,EAAOkC,UAAU,MAAMC,MANvB,CAACE,UAAW,UAOjBvB,GAAW,0CACXD,EAAKa,KAAI,SAACmB,GAAD,OAAqD,kBAAC,EAAD,eAASD,IAAG,OAAEC,QAAF,IAAEA,OAAF,EAAEA,EAAKlB,IAAQkB,SCavFC,EAvBM,WAAO,IAAD,EAEGpD,mBAAS,CAAC,cAFb,mBAEhBM,EAFgB,KAETP,EAFS,KASvB,OACI,kBAAC,WAAD,KACI,8CACA,kBAAC,EAAD,CAAgBA,SAAUA,IAC1B,6BACA,4BAAQsD,QAVE,WACd,IAAIC,EAAe,SAASC,QAAQjD,EAAMkD,OAAS,GAAGC,YACtD1D,GAAS,SAAAO,GAAK,OAAKgD,GAAL,mBAAchD,QAQIG,KAAK,SAAS+B,UAAU,wBAApD,iBACA,yBAAKA,UAAU,aACVlC,EAAM0B,KAAI,SAAA0B,GAAI,OAAI,kBAAC,EAAD,CAAQR,IAAKQ,EAAMpD,MAAOoD,UCf7DC,IAASC,OACL,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.69a9a105.chunk.js","sourcesContent":["// @flow\r\nimport React, { useState} from 'react';\r\nimport PropTypes from \"prop-types\";\r\n\r\n\r\n\r\n// @ts-ignore\r\nconst SearchInputApp = (props:{setLista:React.Dispatch<any>}) => {\r\n    const {setLista}=props;\r\n    const [value,setValue] = useState<string>('');\r\n    const changeValue = ( evento:any ) => {\r\n\r\n        console.log(evento.target.value)\r\n        setValue(evento.target.value);\r\n    }\r\n\r\n    const handleSubmit = (e:any) => {\r\n        e.preventDefault();\r\n        setLista( (lista:string[]) =>  [...lista,value]);\r\n        setValue('');\r\n        console.log(e);\r\n    }\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input\r\n                type=\"text\"\r\n                value={value}\r\n                onChange={changeValue}\r\n            />\r\n        </form>\r\n    );\r\n};\r\n\r\nSearchInputApp.prototype = {\r\n    setLista:PropTypes.func.isRequired\r\n}\r\n\r\n\r\n\r\nexport default SearchInputApp;\r\n","import {useEffect, useState} from \"react\";\r\nimport {getImgs} from \"../helper/functions\";\r\nimport {IData} from \"../Components/CardApp\";\r\n\r\nexport interface IStateCategory {\r\n    data: IData[],\r\n    loading: boolean\r\n}\r\n\r\n\r\nexport const useFetchGifts = (category: string) => {\r\n\r\n    const [state, setState] = useState<IStateCategory>({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect(() => {\r\n        getImgs(category).subscribe(data => {\r\n            setState({data, loading: false})\r\n        })\r\n    }, [category]);\r\n\r\n    return state;\r\n}\r\n","import {fromFetch} from \"rxjs/fetch\";\r\nimport {map, pluck} from \"rxjs/operators\";\r\nimport {Observable} from \"rxjs\";\r\n\r\nconst api_key = 'NpQmNITAS3whTrjvQTeMawP9CeTdwrdD'\r\n\r\n\r\nexport const getImgs = (categoria: string):Observable<{ id: number, title: string, url: string }[]> => {\r\n    return fromFetch(`https://api.giphy.com/v1/gifs/search?limit=5&api_key=${api_key}&q=${encodeURI(categoria)}`,\r\n        {selector: response => response.json()})\r\n        .pipe(\r\n            pluck('data'),\r\n            map((data: any[]) => data.map(({id, title, images}) => ({\r\n                id,\r\n                title,\r\n                url: images?.downsized_medium.url\r\n            }))),\r\n        )\r\n}\r\n\r\n","import React from \"react\";\r\n\r\n\r\nexport interface IData {\r\n    id: number,\r\n    title: string,\r\n    url: string\r\n}\r\n\r\nconst CardApp = ({id, title, url}: IData) => {\r\n    const stile = {width: '10rem', maxHeight: '80px !important'}\r\n    const stylesrc = {width: '80%', text: 'center', margin: 'auto', height: '100px'}\r\n    return (\r\n        <div className=\"col\">\r\n            <div className=\"card mb-2\" style={stile}>\r\n                <img className=\"card-img-top\" src={url} alt=\"\" style={stylesrc}/>\r\n                <div className=\"card-body\">\r\n                    <div className=\"card-title\">{title}</div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default CardApp;\r\n","import React from 'react';\r\nimport {useFetchGifts} from \"../hooks/useFetchGifs\";\r\nimport CardApp from \"./CardApp\";\r\n\r\ntype tipos = { lista: string }\r\nconst RowApp = ({lista}: tipos) => {\r\n    const stilo = {maxHeight: '150px'}\r\n\r\n    const {data,loading} = useFetchGifts(lista);\r\n\r\n    return (\r\n\r\n        <div key={lista} className=\"row\" style={stilo}>\r\n            {loading && <p>...Cargando</p>}\r\n            {data.map((img: { id: number, title: string, url: string }) => <CardApp key={img?.id} {...img}/>)}\r\n        </div>\r\n\r\n    );\r\n\r\n}\r\n\r\nexport default RowApp;\r\n","import React, {Fragment, useState} from 'react';\r\nimport SearchInputApp from \"./SearchInputApp\";\r\nimport RowApp from \"./RowApp\";\r\n\r\nconst GitExpertApp = () => {\r\n\r\n    const [lista, setLista] = useState(['Lista Uno']);\r\n\r\n    const handleAdd = () => {\r\n        let item: string = `Lista `.concat((lista.length + 1).toString());\r\n        setLista(lista => [item, ...lista])\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            <h2>Gif App Expert</h2>\r\n            <SearchInputApp setLista={setLista}/>\r\n            <hr/>\r\n            <button onClick={handleAdd} type=\"button\" className=\"btn btn-primary mb-2\">Add Item List</button>\r\n            <div className=\"container\">\r\n                {lista.map(nome => <RowApp key={nome} lista={nome}/>)}\r\n            </div>\r\n        </Fragment>\r\n    );\r\n\r\n}\r\n\r\nexport default GitExpertApp;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GitExpertApp from \"./Components/GitExpertApp\";\n\nReactDOM.render(\n    <GitExpertApp />,\n    document.getElementById('root')\n)\n;\n\n"],"sourceRoot":""}